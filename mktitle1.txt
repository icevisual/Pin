

#include "stdafx.h"  
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define GROWTH 200

class CTitle
{
public:
	CTitle() {
		printf("init CTitle \n");
		cursor = 0;
		length = GROWTH;
		content = (char *)malloc(sizeof(char) * length);
		if (NULL == content) {
			printf("failed to malloc  ");
			exit(1);
		}
	}
	~CTitle() {
		printf("delete ~CTitle \n");
		free(content);
		content = NULL;
	}
	int size() {
		return cursor;
	}
	void append(char ch) {
		if (cursor >= length) {
			length += GROWTH;
			char * tmp = (char *)realloc(content, sizeof(char) * length);
			if (NULL == tmp) {
				printf("failed to realloc  ");
				exit(1);
			}
			content = tmp;
		}
		content[cursor++] = ch;
	}
	void reset() {
		cursor = 0;
	}
	bool analysisTittle() {
		// length check
		// tittle search 
		char * tags = "第章";

		//	char * cmap[11] = { "一","二","三","四","五","六","七","八","九","十","十一" };
		char * cmap[11] = { "01","02","03","04","05","06","07","08","09","10","11" };
		char * map[11] = { "Ⅰ","Ⅱ","Ⅲ","Ⅳ","Ⅳ","Ⅴ","Ⅵ","Ⅶ","Ⅷ","Ⅸ","Ⅹ" };

		if (cursor > 100) {
			return false;
		}
		int start = 0, ctag = 0;
		for (int i = 1; i < cursor; i++)
		{
			if (start == 0 && content[i - 1] == tags[0] && content[i] == tags[1]) {
				start = i;
			}
			if (start && content[i - 1] == tags[2] && content[i] == tags[3]) {
				if (i + 1 < cursor) {
					if (content[i + 1] != ' ') {
						return false;
					}
				}

				while (ctag < 11 && (content[start + 1] != map[ctag][0] || content[start + 2] != map[ctag][1]))  ctag++;
				if (ctag != 11) {
					// replace map to cmap
					content[start + 1] = cmap[ctag][0];
					content[start + 2] = cmap[ctag][1];
				}
				else {
					ctag = 0;
				}

				return true;
			}
		}
		return false;
	}

	void outputfile(FILE * fp) {
		fwrite(content, sizeof(char), cursor, fp);
		fputc('\n', fp);
	}

	void output() {
		for (int i = 0; i < cursor; i++)
		{
			printf("%c", content[i]);
		}
		printf("\n");
	}
private:
	char * content;
	int  cursor, length;
};


int processOneBook(char * filename, char * outputfile) {
	// EnableMemLeakCheck();
	//_CrtSetBreakAlloc(81);

	CTitle * c = new CTitle();
	FILE * fp = NULL, *outfp;
	errno_t err = fopen_s(&fp, filename, "r");
	if (err != 0) {
		printf("failed to open file %s \n", filename);
		return 0;
	}

	err = fopen_s(&outfp, outputfile, "w");
	if (err != 0) {
		printf("failed to open file %s \n", outputfile);
		return 0;
	}


	//char * str = "第Ⅰ卷 梦开始的地方 第001章 降临 第一章";

	//for (int i = 0;i < strlen(str); i++) {
	//	printf("%d = %d\n",i,str[i]);
	//	c->append(str[i]);
	//}
	//
	//printf("c size %d\n",c->size());
	//if (c->analysisTittle()) {
	//	printf("analysisTittle true\n");
	//}
	//delete c;
	//return 0;

	char ch = 0;
	int n = 20000;// max selection number
	while (!feof(fp) && n) {
		ch = fgetc(fp);
		if (ch == 10) {
			if (c->analysisTittle()) {
				c->output();
				n--;
				//c->outputfile(outfp);
			}
			c->outputfile(outfp);

			c->reset();

		}
		else {
			c->append(ch);
		}
	}
	fclose(fp);
	fclose(outfp);
	delete c;
	return 0;
}



int runMain() {
	// soucrce file
	char * filename = "《星海猎人》（校对版全本）作者：非主流神棍.txt";
	// destination file
	char * outputfile = "output.txt";
	processOneBook(filename, outputfile);
}

